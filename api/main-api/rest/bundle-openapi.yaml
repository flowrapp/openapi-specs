openapi: 3.1.0
info:
  title: Flowrapp API
  description: REST API for Flowrapp Backend
  version: 0.0.1
  contact:
    name: Flowrapp Team
    url: https://flowrapp.github.io
    email: flowraapp@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
servers:
  - url: http://localhost:8080/flowrapp
    description: Local server url
tags:
  - name: Users
    description: Operations related to user management, including user profile retrieval, creation, and updates.
  - name: Authentication
    description: Endpoints for user authentication, token management, and session handling.
  - name: Admin
    description: Administrative operations that require elevated privileges.
  - name: Businesses
    description: Operations for managing business entities.
  - name: Invitations
    description: Operations for managing invitations to join businesses.
  - name: Worklogs
    description: Time tracking recording and management operations.
  - name: Timesheet
    description: Reporting and analytics endpoints that provide aggregated data and insights.
  - name: System
    description: System utility endpoints for monitoring and health checks.
  - name: Push Tokens
    description: Operations for managing push notification tokens.
paths:
  /api/v1/ping:
    get:
      summary: API Health Check
      description: Simple endpoint to verify that the API is up and running
      tags:
        - System
      operationId: ping
      responses:
        '200':
          description: API is operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    format: date-time
                    example: '2023-07-01T12:00:00Z'
                required:
                  - status
  /api/v1/push-tokens:
    post:
      summary: Register push notification token
      description: Registers a device push notification token for the authenticated user
      tags:
        - Push Tokens
      operationId: registerPushToken
      security:
        - basicAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushTokenRequestDTO'
      responses:
        '201':
          description: Push token registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Push token registered successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
    delete:
      summary: Delete push notification token
      description: Deletes a device push notification token for the authenticated user
      tags:
        - Push Tokens
      operationId: deletePushToken
      security:
        - basicAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePushTokenRequestDTO'
      responses:
        '200':
          description: Push token deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Push token deleted successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Push token not found
  /api/v1/users:
    post:
      summary: Find a user by name
      description: Searches for and retrieves a user profile based on the provided name.
      tags:
        - Users
      operationId: getUser
      requestBody:
        description: User information to search for
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
        required: true
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          description: User not found
  /api/v1/auth/login:
    post:
      summary: Authenticate a user
      description: Authenticates a user by validating their username and password credentials. Upon successful authentication, it generates and returns access and refresh tokens that can be used for subsequent authorized API requests.
      tags:
        - Authentication
      operationId: login
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
        required: true
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponseDTO'
        '401':
          description: Authentication failed
  /api/v1/auth/token-refresh:
    post:
      summary: Refresh authentication tokens
      description: Renews authentication by generating new access and refresh tokens using a valid refresh token.
      tags:
        - Authentication
      operationId: refreshToken
      requestBody:
        description: Refresh token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequestDTO'
        required: true
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponseDTO'
        '401':
          description: Invalid or expired refresh token
  /api/v1/admin/register:
    post:
      summary: Register a new user with businesses
      description: Creates a new user account in the system with associations to one or more businesses.
      tags:
        - Admin
      operationId: registerUser
      security:
        - basicAuth: []
      requestBody:
        description: User registration information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDTO'
        required: true
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid request data
        '409':
          description: Username or email already exists
  /api/v1/businesses:
    get:
      summary: Get user businesses with roles
      description: Retrieves a comprehensive list of all businesses that are associated with the currently authenticated user, including the role of the current user in each business.
      tags:
        - Businesses
      operationId: getUserBusinesses
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: Businesses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusinessResponseDTO'
                example:
                  - id: 101
                    name: Coffee Time
                    location:
                      latitude: 30.5
                      longitude: 50.5
                      area: 5.3
                    userRole: OWNER
                  - id: 102
                    name: Tea Corner
                    location:
                      latitude: 32
                      longitude: 51.2
                      area: 3.2
                    userRole: COLLABORATOR
        '401':
          description: Unauthorized
  /api/v1/businesses/{businessId}/users:
    get:
      summary: Get users associated within a business
      description: Retrieves a paginated list of users associated with the specified business. Can be filtered by role.
      tags:
        - Businesses
      operationId: getBusinessUsers
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: businessId
          in: path
          required: true
          description: Unique identifier of the business
          schema:
            type: string
        - name: role
          in: query
          required: false
          description: Filter users by role
          schema:
            type: string
            enum:
              - OWNER
              - COLLABORATOR
              - EMPLOYEE
        - name: page
          in: query
          required: false
          description: Page number (0-based)
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
            example: 0
        - name: size
          in: query
          required: false
          description: Page size
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
            example: 20
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PagedResponse'
                  - type: object
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/components/schemas/BusinessUserResponseDTO'
              example:
                content:
                  - userId: user-1
                    username: john.doe
                    email: john@example.com
                    role: OWNER
                  - userId: user-2
                    username: jane.smith
                    email: jane@example.com
                    role: COLLABORATOR
                page: 0
                size: 20
                totalElements: 2
                totalPages: 1
        '401':
          description: Unauthorized
        '404':
          description: Business not found
  /api/v1/businesses/{businessId}/worklogs/clock-in:
    post:
      summary: Register start of workday
      description: Records the start time of a work session for the authenticated user at a specific business location.
      tags:
        - Worklogs
      operationId: clockIn
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: businessId
          in: path
          required: true
          description: ID of the business
          schema:
            type: integer
            format: int64
      requestBody:
        description: Clock-in information (optional)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClockInRequestDTO'
        required: false
      responses:
        '200':
          description: Clock-in successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkLogResponseDTO'
        '401':
          description: Unauthorized
        '404':
          description: Business not found
  /api/v1/businesses/{businessId}/worklogs{worklogId}/clock-out:
    put:
      summary: Close open worklog
      description: Finalizes an active work session by recording the end time for the authenticated user at a specific business location.
      tags:
        - Worklogs
      operationId: clockOut
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: businessId
          in: path
          required: true
          description: ID of the business
          schema:
            type: integer
            format: int64
        - name: worklogId
          in: path
          required: true
          description: ID of the worklog to close
          schema:
            type: integer
            format: int64
      requestBody:
        description: Clock-out information (optional)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClockOutRequestDTO'
        required: false
      responses:
        '200':
          description: Clock-out successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkLogResponseDTO'
        '401':
          description: Unauthorized
        '404':
          description: Business not found or no open worklog
  /api/v1/businesses/{businessId}/worklogs:
    get:
      summary: Get filtered worklogs
      description: Retrieves a collection of worklog records for a specific business, filtered by various time-based and user criteria.
      tags:
        - Worklogs
      operationId: getWorklogs
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: businessId
          in: path
          required: true
          description: ID of the business
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          required: false
          description: Start date for filtering (format YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: '2025-07-22'
        - name: to
          in: query
          required: false
          description: End date for filtering (format YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: '2025-07-28'
        - name: date
          in: query
          required: false
          description: Specific date for filtering (alternative to from/to, format YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: '2025-07-29'
        - name: userId
          in: query
          required: false
          description: Filter by user ID
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        '200':
          description: Worklogs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkLogResponseDTO'
        '401':
          description: Unauthorized
        '404':
          description: Business not found
  /api/v1/worklogs:
    get:
      summary: Get user worklogs
      description: Retrieves a collection of worklog records for the authenticated user.
      tags:
        - Worklogs
      operationId: getUserWorklogs
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: from
          in: query
          required: false
          description: Start date for filtering (format YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: '2025-07-22'
        - name: to
          in: query
          required: false
          description: End date for filtering (format YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: '2025-07-28'
        - name: date
          in: query
          required: false
          description: Specific date for filtering (alternative to from/to, format YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: '2025-07-29'
        - name: businessId
          in: query
          required: false
          description: Filter by business ID
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        '200':
          description: Worklogs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkLogResponseDTO'
        '401':
          description: Unauthorized
  /api/v1/worklogs/{worklogId}:
    get:
      summary: Get worklog by ID
      description: Retrieves a specific worklog by its unique identifier.
      tags:
        - Worklogs
      operationId: getWorklogById
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: worklogId
          in: path
          required: true
          description: ID of the worklog to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Worklog retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkLogResponseDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - User does not have permission to view this worklog
        '404':
          description: Worklog not found
    put:
      summary: Update worklog
      description: Updates the clock-in and clock-out times for a specific worklog.
      tags:
        - Worklogs
      operationId: updateWorklog
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: worklogId
          in: path
          required: true
          description: ID of the worklog to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated clock-in and clock-out information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkLogUpdateRequestDTO'
        required: true
      responses:
        '200':
          description: Worklog updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkLogResponseDTO'
        '400':
          description: Invalid request (e.g., clock-out before clock-in)
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - User does not have permission to update this worklog
        '404':
          description: Worklog not found
  /api/v1/businesses/{businessId}/timesheets/weekly-hours:
    get:
      summary: Get weekly hours report
      description: Generates and retrieves a comprehensive weekly hours report for users within a specified business.
      tags:
        - Timesheet
      operationId: getWeeklyHoursReport
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: businessId
          in: path
          required: true
          description: ID of the business to filter by
          schema:
            type: string
            example: abc123
        - name: week
          in: query
          required: true
          description: ISO week format (YYYY-Www)
          schema:
            type: string
            pattern: ^\d{4}-W\d{2}$
            example: 2025-W31
        - name: userId
          in: query
          required: false
          description: ID of the user to filter by
          schema:
            type: string
            example: u001
      responses:
        '200':
          description: Weekly hours report retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeeklyHoursResponseDTO'
            text/csv:
              schema:
                type: string
        '400':
          description: Invalid request parameters
        '401':
          description: Unauthorized
        '404':
          description: No data found for the specified parameters
  /api/v1/businesses/{businessId}/invitations:
    post:
      summary: Create a business invitation
      description: Creates a new invitation to join a business with a specified role.
      tags:
        - Invitations
      operationId: createBusinessInvitation
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: businessId
          in: path
          required: true
          description: Unique identifier of the business
          schema:
            type: integer
      requestBody:
        description: Invitation details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationRequestDTO'
            example:
              email: invitee@example.com
              role: MANAGER
      responses:
        '201':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponseDTO'
              example:
                id: 123
                email: invitee@example.com
                role: MANAGER
                status: PENDING
                createdAt: '2023-06-15T14:30:00Z'
                expiresAt: '2023-06-22T14:30:00Z'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - User does not have permission to create invitations
        '404':
          description: Business not found
        '409':
          description: Conflict - User already invited or already a member
    get:
      summary: Get invitations for a business
      description: Retrieves a list of all pending invitations for the specified business.
      tags:
        - Invitations
      operationId: getBusinessInvitations
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: businessId
          in: path
          required: true
          description: Unique identifier of the business
          schema:
            type: integer
        - name: status
          in: query
          required: false
          description: Filter invitations by status
          schema:
            type: string
            enum:
              - PENDING
              - ACCEPTED
              - DECLINED
              - EXPIRED
            default: PENDING
      responses:
        '200':
          description: Invitations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvitationResponseDTO'
              example:
                - id: 123
                  email: invitee@example.com
                  role: COLLABORATOR
                  status: PENDING
                  createdAt: '2023-06-15T14:30:00Z'
                  expiresAt: '2023-06-22T14:30:00Z'
                - id: 124
                  email: another@example.com
                  role: EMPLOYEE
                  status: PENDING
                  createdAt: '2023-06-16T10:15:00Z'
                  expiresAt: '2023-06-23T10:15:00Z'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - User does not have permission to view invitations
        '404':
          description: Business not found
  /api/v1/businesses/{businessId}/invitations/{invitationId}:
    delete:
      summary: Delete a business invitation
      description: Deletes an existing invitation to join a business.
      tags:
        - Invitations
      operationId: deleteBusinessInvitation
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: businessId
          in: path
          required: true
          description: Unique identifier of the business
          schema:
            type: integer
        - name: invitationId
          in: path
          required: true
          description: Unique identifier of the invitation
          schema:
            type: integer
      responses:
        '204':
          description: Invitation deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - User does not have permission to delete invitations
        '404':
          description: Business or invitation not found
  /api/v1/invitations:
    get:
      summary: Get invitations for user
      description: Retrieves a list of all invitations for the currently authenticated user.
      tags:
        - Invitations
      operationId: getUserInvitations
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          description: Filter invitations by status
          schema:
            type: string
            enum:
              - PENDING
              - ACCEPTED
              - DECLINED
              - EXPIRED
            default: PENDING
      responses:
        '200':
          description: Invitations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvitationResponseDTO'
              example:
                - id: 123
                  email: invitee@example.com
                  role: COLLABORATOR
                  status: PENDING
                  createdAt: '2023-06-15T14:30:00Z'
                  expiresAt: '2023-06-22T14:30:00Z'
                - id: 124
                  email: another@example.com
                  role: EMPLOYEE
                  status: PENDING
                  createdAt: '2023-06-16T10:15:00Z'
                  expiresAt: '2023-06-23T10:15:00Z'
        '401':
          description: Unauthorized
  /api/v1/invitations/accept:
    post:
      summary: Accept an invitation
      description: Accepts an invitation to join a business using a token.
      tags:
        - Invitations
      operationId: acceptInvitation
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: token
          in: query
          required: true
          description: Token to validate the invitation
          schema:
            type: string
            pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      responses:
        '200':
          description: Invitation accepted successfully
        '400':
          description: Invalid request or token
        '404':
          description: Invitation not found
        '410':
          description: Invitation expired or already used
  /api/v1/invitations/register:
    post:
      summary: Register user from invitation
      description: Registers a new user an accepts the invitation.
      tags:
        - Invitations
      operationId: registerUserFromInvitation
      parameters:
        - name: token
          in: query
          required: true
          description: Token from the invitation email to validate the user registration
          schema:
            type: string
            pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      requestBody:
        description: Registration details for the new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserFromInvitationRequestDTO'
            example:
              username: johndoe
              phone: '+1234567890'
              password: securePassword123
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid request or token
        '404':
          description: Token not found
        '409':
          description: Username or phone already exists
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Basic authentication with username and password
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT-based authentication
  schemas:
    PushTokenRequestDTO:
      type: object
      properties:
        token:
          type: string
          description: The push notification token
          example: abcdef123456
        platform:
          type: string
          description: The device platform
          enum:
            - ANDROID
            - IOS
          example: ANDROID
        deviceId:
          type: string
          description: Unique identifier for the device
          example: uuid-of-device
      required:
        - token
        - platform
        - deviceId
    DeletePushTokenRequestDTO:
      type: object
      properties:
        deviceId:
          type: string
          description: Unique identifier for the device
          example: uuid-of-device
      required:
        - deviceId
    UserRequestDTO:
      type: object
      description: Request object for user operations
      properties:
        name:
          type: string
          description: Name of the user
          example: John Doe
      required:
        - name
    UserResponseDTO:
      type: object
      description: Response object containing user information
      properties:
        name:
          type: string
          description: Name of the user
          example: John Doe
        dni:
          type: string
          description: Document National Identity of the user
          example: 12345678A
    LoginRequestDTO:
      type: object
      description: Request object for user login
      properties:
        username:
          type: string
          description: Username for authentication
          example: user
        password:
          type: string
          description: Password for authentication
          example: pass
      required:
        - username
        - password
    TokenResponseDTO:
      type: object
      description: Response object containing authentication tokens
      properties:
        accessToken:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIs...
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
          example: d8a1fef4-234d-4c2b-bd7a-...
    RefreshRequestDTO:
      type: object
      description: Request object for token refresh
      properties:
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
          example: d8a1fef4-234d-4c2b-bd7a-...
      required:
        - refreshToken
    LocationDTO:
      type: object
      description: Geographic location information
      properties:
        latitude:
          type: number
          format: double
          description: Latitude coordinate
          example: 30.5
        longitude:
          type: number
          format: double
          description: Longitude coordinate
          example: 50.5
        area:
          type: number
          format: double
          description: Area size in square units
          example: 5.3
      required:
        - latitude
        - longitude
        - area
    BusinessDTO:
      type: object
      description: Business information
      properties:
        name:
          type: string
          description: Name of the business
          example: Business 1
        location:
          $ref: '#/components/schemas/LocationDTO'
      required:
        - name
        - location
    RegisterRequestDTO:
      type: object
      description: Request object for user registration
      properties:
        username:
          type: string
          description: Username for the new user
          example: username
        mail:
          type: string
          description: Email address for the new user
          example: mail
        business:
          type: array
          description: List of businesses associated with the user
          items:
            $ref: '#/components/schemas/BusinessDTO'
          example:
            - name: Business 1
              location:
                latitude: 30.5
                longitude: 50.5
                area: 5.3
            - name: Business 2
              location:
                latitude: 35.2
                longitude: 45.7
                area: 3.9
      required:
        - username
        - mail
        - business
    BusinessResponseDTO:
      type: object
      description: Business information with identifier
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the business
          example: 101
        name:
          type: string
          description: Name of the business
          example: Coffee Time
        location:
          $ref: '#/components/schemas/LocationDTO'
        userRole:
          type: string
          description: Role of the current authenticated user in the business
          enum:
            - OWNER
            - COLLABORATOR
            - EMPLOYEE
          example: OWNER
      required:
        - id
        - name
        - location
        - userRole
    PagedResponse:
      type: object
      description: Generic paginated response wrapper
      properties:
        content:
          type: array
          description: The page content (array of items)
        page:
          type: integer
          format: int32
          description: Current page number (0-based)
          example: 0
          minimum: 0
        size:
          type: integer
          format: int32
          description: Size of the page
          example: 20
          minimum: 1
        totalElements:
          type: integer
          format: int64
          description: Total number of elements across all pages
          example: 100
        totalPages:
          type: integer
          format: int32
          description: Total number of pages
          example: 5
      required:
        - content
        - page
        - size
        - totalElements
        - totalPages
    BusinessUserResponseDTO:
      type: object
      description: User information associated with a business
      properties:
        userId:
          type: string
          description: Unique identifier for the user
          example: user-1
        username:
          type: string
          description: Username of the user
          example: john.doe
        email:
          type: string
          description: Email address of the user
          example: john@example.com
        role:
          type: string
          description: Role of the user in the business
          enum:
            - OWNER
            - COLLABORATOR
            - EMPLOYEE
          example: OWNER
      required:
        - userId
        - username
        - email
        - role
    ClockInRequestDTO:
      type: object
      description: Request object for clocking in
      properties:
        clockIn:
          type: string
          format: date-time
          description: Timestamp for clock-in (optional, server uses current time if omitted)
          example: '2025-07-29T08:30:00'
    WorkLogResponseDTO:
      type: object
      description: Response object containing worklog information
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the worklog
          example: 123
        userId:
          type: integer
          format: int64
          description: Identifier of the user who created the worklog
          example: 1
        clockIn:
          type: string
          format: date-time
          description: Timestamp when the user clocked in
          example: '2025-07-29T08:30:00'
        clockOut:
          type: string
          format: date-time
          description: Timestamp when the user clocked out (null if not clocked out yet)
          example: '2025-07-29T17:30:00'
          nullable: true
      required:
        - id
        - userId
        - clockIn
    ClockOutRequestDTO:
      type: object
      description: Request object for clocking out
      properties:
        clockOut:
          type: string
          format: date-time
          description: Timestamp for clock-out (optional, server uses current time if omitted)
          example: '2025-07-29T17:30:00'
    WorkLogUpdateRequestDTO:
      type: object
      description: Request object for updating a worklog with clock-in and clock-out times
      properties:
        clockIn:
          type: string
          format: date-time
          description: Timestamp for clock-in
          example: '2025-07-29T08:30:00'
        clockOut:
          type: string
          format: date-time
          description: Timestamp for clock-out
          example: '2025-07-29T17:30:00'
          nullable: true
    UserHoursDTO:
      type: object
      description: User hours information
      properties:
        userId:
          type: string
          description: ID of the user
          example: u001
        username:
          type: string
          description: Username of the user
          example: john.doe
        email:
          type: string
          description: Email of the user
          example: john.doe@example.com
        dailyHours:
          type: object
          description: Hours worked per day
          additionalProperties:
            type: number
            format: double
          example:
            '2025-07-28': 8
            '2025-07-29': 7.5
            '2025-07-30': 8
            '2025-07-31': 7
            '2025-08-01': 8
        totalHours:
          type: number
          format: double
          description: Total hours worked in the week
          example: 38.5
      required:
        - userId
        - username
        - email
        - dailyHours
        - totalHours
    WeeklyHoursResponseDTO:
      type: object
      description: Weekly hours report for users
      properties:
        businessId:
          type: string
          description: ID of the business
          example: abc123
        week:
          type: string
          description: ISO week format (YYYY-Www)
          example: 2025-W31
        startDate:
          type: string
          format: date
          description: Start date of the week
          example: '2025-07-28'
        endDate:
          type: string
          format: date
          description: End date of the week
          example: '2025-08-03'
        users:
          type: array
          description: List of users with their hours
          items:
            $ref: '#/components/schemas/UserHoursDTO'
      required:
        - businessId
        - week
        - startDate
        - endDate
        - users
    InvitationResponseDTO:
      type: object
      description: Response containing invitation details
      properties:
        id:
          type: integer
          description: Unique identifier for the invitation
          example: 123
        email:
          type: string
          description: Email address of the invitee
          example: invitee@example.com
        role:
          type: string
          description: Role assigned to the invitee
          enum:
            - OWNER
            - MANAGER
            - EMPLOYEE
          example: MANAGER
        status:
          type: string
          description: Status of the invitation
          enum:
            - PENDING
            - ACCEPTED
            - DECLINED
            - EXPIRED
          example: PENDING
        createdAt:
          type: string
          format: date-time
          description: Date and time when the invitation was created
          example: '2023-06-15T14:30:00Z'
        expiresAt:
          type: string
          format: date-time
          description: Date and time when the invitation expires
          example: '2023-06-22T14:30:00Z'
      required:
        - id
        - email
        - role
        - status
        - createdAt
        - expiresAt
    InvitationRequestDTO:
      type: object
      description: Request to invite a user to a business
      properties:
        email:
          type: string
          description: Email address of the invitee
          example: invitee@example.com
        role:
          type: string
          description: Role to assign to the invitee
          enum:
            - OWNER
            - MANAGER
            - EMPLOYEE
          example: MANAGER
      required:
        - email
        - role
    RegisterUserFromInvitationRequestDTO:
      type: object
      description: Registration details for a new user who received an invitation
      properties:
        username:
          type: string
          description: Username for the new user
          example: johndoe
        phone:
          type: string
          description: Phone number of the user
          maxLength: 15
          example: '+1234567890'
        password:
          type: string
          description: Password for the new user
          format: password
          example: securePassword123
      required:
        - username
        - phone
        - password
